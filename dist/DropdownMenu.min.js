(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('@fortawesome/react-fontawesome'), require('@fortawesome/free-solid-svg-icons')) :
  typeof define === 'function' && define.amd ? define(['react', '@fortawesome/react-fontawesome', '@fortawesome/free-solid-svg-icons'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.DropdownMenu = factory(global.React, global.reactFontawesome, global.freeSolidSvgIcons));
}(this, (function (React, reactFontawesome, freeSolidSvgIcons) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = ".react-auto-dropdown-menu{\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: left;\r\n  cursor: pointer;\r\n}\r\n\r\n.react-auto-dropdown-menu-cursor{\r\n  cursor: pointer;\r\n}\r\n\r\n.react-auto-dropdown-menu-embedded-chevron{\r\n  margin: auto 5px;\r\n}\r\n\r\n.react-auto-dropdown-menu-embedded{\r\n  padding-left: 10px;\r\n  padding-bottom: 10px;\r\n  border-radius: 3px;\r\n  background-color: transparent;\r\n}\r\n\r\n.react-auto-dropdown-menu-embedded-right{\r\n  padding-right: 10px;\r\n  padding-bottom: 10px;\r\n  border-radius: 3px;\r\n  background-color: transparent;\r\n}\r\n\r\n.react-auto-dropdown-menu-expanded-top-level{\r\n  position: absolute;\r\n  padding: 10px 30px 0px 10px;\r\n  border-radius: 3px;\r\n  background-color: rgba(0, 0, 0, .9);\r\n}\r\n\r\n.react-auto-dropdown-menu-item-list{\r\n  text-decoration: none;\r\n  list-style-type:none;\r\n  margin-left: 5px;\r\n}\r\n\r\n.react-auto-dropdown-menu-item-list > a {\r\n  text-decoration: none;\r\n  text-align: left;\r\n}\r\n";
  styleInject(css_248z);

  const DropdownMenu = props => {
    const [isOpen, setIsOpen] = React.useState(false);
    const [idSeed, setIdSeed] = React.useState(0);
    const [positionStyle, setPositionStyle] = React.useState({}); // Create a reference to this element, only used by the top level menu

    const wrapperRef = React.useRef(); // Close the menu if user clicks outside of the menu

    const handleClickOutside = event => {
      if (!wrapperRef?.current?.contains(event.target)) {
        setIsOpen(false);
      }
    };

    React.useEffect(() => {
      // If the menu is the top level menu, add an event listener to the document 
      // to close the menu when clicked outside
      if (!props.isEmbedded) {
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
          // Removes the event listener after the event fires (Prevent Continuously adding events)
          document.removeEventListener("mousedown", handleClickOutside);
        };
      }
    }, [wrapperRef]); // Set Seed Id - This is used for determining position with multiple dropdown menus

    React.useEffect(() => {
      setIdSeed(Math.floor(Math.random() * 10000));
    }, []); // Get top level menu coordinates

    React.useEffect(() => {
      if (!props.isEmbedded) {
        // Dynamically find the x and y coordinates of the div 
        let dropdownMenuDiv = document.getElementById(`topLevelMenu_seed${idSeed}`);

        if (dropdownMenuDiv) {
          switch (props.dropdownLocation) {
            case "full-screen":
              setPositionStyle({
                left: '0px',
                top: '0px',
                width: 'calc(90% - 10px)',
                height: 'calc(100% - 10px)',
                marginTop: '0px',
                ...props.style
              });
              break;

            case "full-screen-right":
              setPositionStyle({
                right: '0px',
                top: '0px',
                width: 'calc(90% - 10px)',
                height: 'calc(100% - 10px)',
                marginTop: '0px',
                textAlign: 'right',
                ...props.style
              });
              break;

            case "left":
              setPositionStyle({
                right: `${window.innerWidth - dropdownMenuDiv.offsetLeft}px`,
                top: `${dropdownMenuDiv.offsetTop}px`,
                ...props.style
              });
              break;

            case "bottom":
              setPositionStyle({
                left: `${dropdownMenuDiv.offsetLeft - dropdownMenuDiv.offsetWidth}px`,
                top: `${dropdownMenuDiv.offsetTop + dropdownMenuDiv.offsetHeight}px`,
                ...props.style
              });
              break;

            case "bottom-left":
              setPositionStyle({
                right: `${window.innerWidth - dropdownMenuDiv.offsetLeft - dropdownMenuDiv.offsetWidth}px`,
                top: `${dropdownMenuDiv.offsetTop + dropdownMenuDiv.offsetHeight}px`,
                ...props.style
              });
              break;

            case "right":
              setPositionStyle({
                left: `${dropdownMenuDiv.offsetLeft + dropdownMenuDiv.offsetWidth}px`,
                top: `${dropdownMenuDiv.offsetTop}px`,
                ...props.style
              });
              break;

            default:
            case "bottom-right":
              setPositionStyle({
                left: `${dropdownMenuDiv.offsetLeft}px`,
                top: `${dropdownMenuDiv.offsetTop + dropdownMenuDiv.offsetHeight}px`,
                ...props.style
              });
              break;
          }
        }
      }
    }, [idSeed, isOpen, props.style, props.dropdownLocation]);

    const childOrEmbeddedMenu = child => {
      // Apply color styling from top level menu, or default. But allow passed in style to overwrite
      const childStyling = child.props.style;
      const currentStyling = {
        color: props.style?.color || 'white'
      };
      const styleToApply = { ...currentStyling,
        ...childStyling
      }; // If the defaulted property is detected, mark the element as embedded

      if (child?.props?.componentType === 'dropdown-menu') {
        return /*#__PURE__*/React__default['default'].cloneElement(child, {
          isEmbedded: true,
          dropdownLocation: props.dropdownLocation,
          style: styleToApply
        });
      }

      return /*#__PURE__*/React__default['default'].cloneElement(child, {
        style: styleToApply
      });
    };

    return /*#__PURE__*/React__default['default'].createElement("div", {
      id: `topLevelMenu_seed${idSeed}`,
      className: "dropdownMenu",
      ref: wrapperRef
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      onClick: () => setIsOpen(!isOpen),
      className: "react-auto-dropdown-menu-cursor",
      style: props.isEmbedded ? {
        color: props.style?.color || 'white',
        display: 'flex',
        flexDirection: 'row'
      } : {}
    }, props.isEmbedded && props.enableChevron && /*#__PURE__*/React__default['default'].createElement("span", {
      className: "react-auto-dropdown-menu-embedded-chevron"
    }, /*#__PURE__*/React__default['default'].createElement(reactFontawesome.FontAwesomeIcon, {
      icon: isOpen ? freeSolidSvgIcons.faAngleDown : freeSolidSvgIcons.faAngleRight
    }), " "), props.title), isOpen &&
    /*#__PURE__*/
    // Determine dropdown menu styling based on if it is the top level or embedded 
    React__default['default'].createElement("ul", {
      className: `${!props.isEmbedded ? 'react-auto-dropdown-menu-expanded-top-level' : props.dropdownLocation === 'full-screen-right' ? 'react-auto-dropdown-menu-embedded-right' : 'react-auto-dropdown-menu-embedded'}`,
      style: positionStyle
    }, props.children.map((child, index) => {
      return /*#__PURE__*/React__default['default'].createElement("li", {
        className: "react-auto-dropdown-menu-item-list",
        key: `Dropdown-Item-${index}-${child.type.toString()}`
      }, childOrEmbeddedMenu(child));
    })));
  };

  DropdownMenu.defaultProps = {
    enableChevron: true,
    dropdownLocation: 'full-screen',
    title: '',
    items: [],
    componentType: 'dropdown-menu'
  };

  return DropdownMenu;

})));
